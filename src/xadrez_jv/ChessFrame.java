/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package xadrez_jv;

import java.awt.Color;
import java.awt.Image;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

/**
 *
 * @author Maria Clara
 */
public class ChessFrame extends javax.swing.JFrame {
	/**
	 * @brief CLASSE PARA O JOGO NO MODO SIMULAÇÃO
	 * */
	
	private static Tabuleiro t = new Tabuleiro();
    private boolean controller = false; //Usada na verificação de tipo de clique no tabuleiro (se é adição ou movimentação de peças)
	private static boolean canMakeMovement = false; //Usada para verificar se é um clique de seleção de peça ou escolha de destino na movimentação
	private Peca p;
    /**
     * Creates new form ChessFrame
     */
    public ChessFrame() {
        initComponents();
        drawChessBoard();
        PreencheLetras();
        PreencheNumeros();
        PreencheMenu();

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CapturadasBrancas1 = new javax.swing.JPanel();
        MenuLateral = new javax.swing.JPanel();
        AddBispo = new javax.swing.JButton();
        Menu = new javax.swing.JLabel();
        AddTorre = new javax.swing.JButton();
        AddCavalo = new javax.swing.JButton();
        Bispo = new javax.swing.JLabel();
        Torre = new javax.swing.JLabel();
        Cavalo = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        Sair = new javax.swing.JLabel();
        Tabuleiro = new javax.swing.JPanel();
        Numericas = new javax.swing.JPanel();
        Letras = new javax.swing.JPanel();
        CapturadasBrancas = new javax.swing.JPanel();
        CapturadasPretas = new javax.swing.JPanel();

        CapturadasBrancas1.setBackground(new java.awt.Color(255, 255, 255));
        CapturadasBrancas1.setPreferredSize(new java.awt.Dimension(100, 50));
        CapturadasBrancas1.setLayout(new java.awt.GridLayout(1, 8));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(214, 217, 224));
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setPreferredSize(new java.awt.Dimension(1024, 768));
        setResizable(false);
        setSize(new java.awt.Dimension(1024, 768));

        MenuLateral.setBackground(new java.awt.Color(255, 255, 255));

        AddBispo.setBackground(new java.awt.Color(204, 204, 204));
        AddBispo.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        AddBispo.setText("Adicionar Bispo");
        AddBispo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBispoActionPerformed(evt);
            }
        });

        Menu.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        Menu.setText("MENU:");

        AddTorre.setBackground(new java.awt.Color(204, 204, 204));
        AddTorre.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        AddTorre.setText("Adicionar Torre");
        AddTorre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTorreActionPerformed(evt);
            }
        });

        AddCavalo.setBackground(new java.awt.Color(204, 204, 204));
        AddCavalo.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        AddCavalo.setText("Adicionar Cavalo");
        AddCavalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCavaloActionPerformed(evt);
            }
        });

        Bispo.setBackground(new java.awt.Color(204, 204, 204));

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jButton1.setText("Sair do Jogo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuLateralLayout = new javax.swing.GroupLayout(MenuLateral);
        MenuLateral.setLayout(MenuLateralLayout);
        MenuLateralLayout.setHorizontalGroup(
            MenuLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLateralLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(MenuLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Bispo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MenuLateralLayout.createSequentialGroup()
                        .addGroup(MenuLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Torre, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Cavalo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Sair, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(MenuLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddBispo, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddTorre, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddCavalo, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        MenuLateralLayout.setVerticalGroup(
            MenuLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLateralLayout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(MenuLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddBispo)
                    .addComponent(Bispo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(MenuLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Torre, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddTorre))
                .addGap(18, 18, 18)
                .addGroup(MenuLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Cavalo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddCavalo))
                .addGap(18, 18, 18)
                .addGroup(MenuLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Sair, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(434, 434, 434))
        );

        Tabuleiro.setBackground(new java.awt.Color(255, 255, 255));
        Tabuleiro.setPreferredSize(new java.awt.Dimension(500, 400));
        Tabuleiro.setLayout(new java.awt.GridLayout(8, 8));

        Numericas.setBackground(new java.awt.Color(255, 255, 255));
        Numericas.setPreferredSize(new java.awt.Dimension(100, 400));
        Numericas.setLayout(new java.awt.GridLayout(8, 1));

        Letras.setBackground(new java.awt.Color(255, 255, 255));
        Letras.setPreferredSize(new java.awt.Dimension(25, 100));
        Letras.setLayout(new java.awt.GridLayout(1, 8));

        CapturadasBrancas.setBackground(new java.awt.Color(214, 217, 224));
        CapturadasBrancas.setPreferredSize(new java.awt.Dimension(100, 50));
        CapturadasBrancas.setLayout(new java.awt.GridLayout(1, 8));

        CapturadasPretas.setBackground(new java.awt.Color(214, 217, 224));
        CapturadasPretas.setPreferredSize(new java.awt.Dimension(100, 50));
        CapturadasPretas.setLayout(new java.awt.GridLayout(1, 8));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MenuLateral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Letras, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CapturadasPretas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Numericas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Tabuleiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CapturadasBrancas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MenuLateral, javax.swing.GroupLayout.PREFERRED_SIZE, 708, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(CapturadasPretas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Letras, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Tabuleiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Numericas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CapturadasBrancas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddBispoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBispoActionPerformed
        int colorIndex = selectColorAndShowMessage("Selecione a cor da peça e depois clique na casa em que deseja\nposicionar o Bispo");
        this.p = new Bispo(0, 0, colorIndex);
        this.controller = false;
    }//GEN-LAST:event_AddBispoActionPerformed

    private void AddTorreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTorreActionPerformed
    	int colorIndex = selectColorAndShowMessage("Selecione a cor da peça e depois clique na casa em que deseja\nposicionar a Torre");
        this.p = new Torre(0, 0, colorIndex);
        this.controller = false;
    }//GEN-LAST:event_AddTorreActionPerformed

    private void AddCavaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCavaloActionPerformed
    	
    	int colorIndex = selectColorAndShowMessage("Selecione a cor da peça e depois clique na casa em que deseja\nposicionar o Cavalo");
        this.p = new Cavalo(0, 0, colorIndex);
        this.controller = false;
    }//GEN-LAST:event_AddCavaloActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        t.limparTabuleiro();
        t.limparCapturados();
    	dispose();
        ChessFrame3.main(null);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /** @brief Mostra uma janela para que o usuário escolha a cor 
     * da peça que está adicionando no tabuleiro. Além disso também mostra
     * uma mensagem instruindo o usuário a selecionar a casa onde ele
     * quer que a peça seja posicionada.
     * */
    private int selectColorAndShowMessage(String message)
    {
    	String[] colors = {"Branco", "Preto"};
        
        int colorIndex = JOptionPane.showOptionDialog(
                null,
                message,
                "Selecione a cor",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                colors,
                colors[0]
        );
        
        return colorIndex;
    }
    
    /** @brief Handler para cliques nas casas do tabuleiro.
     * Controla quando a ação é feita para adição de uma nova peça ou
     * para movimento de uma peça já posicionada no tabuleiro.
     * */
    private void cellClickHandler(int row, int col) {
    	if (!controller) //Ação realizada quando é uma adição de nova peça
    	{
    		if (this.p != null) {
    			this.p.setPosicaoOrigemX(row);
    			this.p.setPosicaoOrigemY(col);
    			t.setPeca(p);
    			updateChessBoard();
    			controller = true;  
    		}else 
    			JOptionPane.showMessageDialog(null, "Escolha uma peça no menu para adicionar\nno tabuleiro!", "ERRO", JOptionPane.ERROR_MESSAGE);
    	}//Ação que será realizada quando é movimentação de uma peça já disponível no tabuleiro
    	else {
    		if (!canMakeMovement)
    		{
    			this.p = t.getMatrizPosicao(row, col);
    			if (this.p == null)
    				JOptionPane.showMessageDialog(null, "Selecione uma peça para realizar\num movimento!", "ERRO", JOptionPane.ERROR_MESSAGE);
    			else canMakeMovement = true;
    		}else if (canMakeMovement){
    			if (!t.movimentarPeca(row, col, p.id))
    				JOptionPane.showMessageDialog(null, "Movimento Inválido!", "ERRO", JOptionPane.ERROR_MESSAGE);
    			updateChessBoard();
    			canMakeMovement = false;
    		}
    		
    	}
    }
    
    /** @brief Desenha novamente o tabuleiro e as peças capturadas*/
    public void updateChessBoard()
    {
    	preencheCapturadasPretas();
    	drawChessBoard();
    	preencheCapturadasBrancas();    	
    }
    
    /**
     * @return O icone correspondente a uma peça (por tipo e cor)
     * */
    public ImageIcon generateChessIcon(Peca p)
    {
    	ImageIcon originalIcon;
    	Image originalImage;
    	Image scaledImage;
    	ImageIcon chessIcon;
    	String path;
    	if (p instanceof Bispo) {
    		path = (p.getCor() == "Branco") ? "/Chess_img/BispoBranco.png" : "/Chess_img/BispoPreto.png";
	    	originalIcon = new ImageIcon(getClass().getResource(path));  
	        originalImage = originalIcon.getImage();
	        scaledImage = originalImage.getScaledInstance(70, 80, Image.SCALE_SMOOTH);  
	        chessIcon = new ImageIcon(scaledImage);
    	}else if (p instanceof Cavalo) {
    		path = (p.getCor() == "Branco") ? "/Chess_img/CavaloBranco.png" : "/Chess_img/CavaloPreto.png";
    		originalIcon = new ImageIcon(getClass().getResource(path)); 
            originalImage = originalIcon.getImage();
            scaledImage = originalImage.getScaledInstance(70, 80, Image.SCALE_SMOOTH);  
            chessIcon = new ImageIcon(scaledImage);
    	}else {
    		path = (p.getCor() == "Branco") ? "/Chess_img/TorreBranca.png" : "/Chess_img/TorrePreta.png";
    		originalIcon = new ImageIcon(getClass().getResource(path)); 
            originalImage = originalIcon.getImage();
            scaledImage = originalImage.getScaledInstance(70, 80, Image.SCALE_SMOOTH);  
            chessIcon = new ImageIcon(scaledImage);
    	}
    	return chessIcon;
    }
    
    private void drawChessBoard() {
        Tabuleiro.removeAll(); // Limpar o painel antes de desenhar o tabuleiro
        // Adicionar linhas do tabuleiro
        for (int row = 0; row < 8; row++) {
           
            for (int col = 0; col < 8; col++) {
                JLabel cell = new JLabel("", SwingConstants.CENTER);
                cell.setBorder(BorderFactory.createLineBorder(Color.GRAY));
                boolean isWhite = (row + col) % 2 == 0;
                if (isWhite) 
                    cell.setBackground(Color.WHITE);
                else
                    cell.setBackground(Color.BLACK);
                cell.setOpaque(true);
                if (!t.isEmpty(row, col))
                	cell.setIcon(generateChessIcon(t.getMatrizPosicao(row, col)));
                              	
                //Cria um Listener para quando a casa é clicada
                final int x = row, y = col;
                cell.addMouseListener(new MouseAdapter() {
                	@Override
                	public void mouseClicked(MouseEvent e)
                	{
                		cellClickHandler(x, y);
                	}
                });
                
                Tabuleiro.add(cell);
                
            }
        }
        Tabuleiro.revalidate();
       Tabuleiro.repaint();
    }

     private void PreencheLetras() {
        Letras.removeAll(); // Limpar o painel antes de desenhar o tabuleiro
        // Adicionar linhas do tabuleiro
              for (char col = 'A'; col <= 'H'; col++) {
                JLabel cell = new JLabel("", SwingConstants.CENTER);
                cell.setText(String.valueOf(col));
                cell.setForeground(Color.BLACK);
                cell.setOpaque(true);
                Letras.add(cell);
            }
       Letras.revalidate();
       Letras.repaint();
    }
     
     private void preencheCapturadasBrancas() {
    	 CapturadasBrancas.removeAll();
    	 
    	 ArrayList<Peca> capturadasBrancas = t.getCapturadasBrancas();
    	 for (int col = 0; col < capturadasBrancas.size(); col++)
    	 {
    		 JLabel cell = new JLabel("", SwingConstants.CENTER);
             cell.setForeground(Color.BLACK);
    		 cell.setIcon(generateChessIcon(capturadasBrancas.get(col)));
    		 cell.setOpaque(true);
    		 CapturadasBrancas.add(cell);
    	 }
    	 CapturadasBrancas.revalidate();
    	 CapturadasBrancas.repaint();
     }
     
     private void preencheCapturadasPretas() {
    	 CapturadasPretas.removeAll();
    	 
    	 ArrayList<Peca> capturadasPretas = t.getCapturadasPretas();
    	 for (int col = 0; col < capturadasPretas.size(); col++)
    	 {
    		 JLabel cell = new JLabel("", SwingConstants.CENTER);
    		 cell.setForeground(Color.WHITE);
    		 cell.setIcon(generateChessIcon(capturadasPretas.get(col)));
    		 cell.setOpaque(true);
    		 CapturadasPretas.add(cell);
    	 }
    	 CapturadasPretas.revalidate();
    	 CapturadasPretas.repaint();
     }

      private void PreencheNumeros() {
        Numericas.removeAll(); // Limpar o painel antes de desenhar o tabuleiro
        // Adicionar linhas do tabuleiro
              for (int row = 1; row <= 8; row++) {
                JLabel cell = new JLabel("", SwingConstants.CENTER);
                cell.setText(String.valueOf(row));
                cell.setForeground(Color.BLACK);
                cell.setOpaque(true);
                Numericas.add(cell);
            }
       Numericas.revalidate();
       Numericas.repaint();
    }
      
    private void PreencheMenu(){
        ImageIcon originalIcon = new ImageIcon(getClass().getResource("/Chess_img/Bispo.png"));  
        Image originalImage = originalIcon.getImage();
        Image scaledImage = originalImage.getScaledInstance(30, 30, Image.SCALE_SMOOTH);  
        ImageIcon MenuIcon = new ImageIcon(scaledImage);
        Bispo.setIcon(MenuIcon);
        
        originalIcon = new ImageIcon(getClass().getResource("/Chess_img/Torre.png")); 
        originalImage = originalIcon.getImage();
        scaledImage = originalImage.getScaledInstance(26, 42, Image.SCALE_SMOOTH);  
        MenuIcon = new ImageIcon(scaledImage);
        Torre.setIcon(MenuIcon);
        
        originalIcon =new ImageIcon(getClass().getResource("/Chess_img/Cavalo.png")); 
        originalImage = originalIcon.getImage();
        scaledImage = originalImage.getScaledInstance(26, 42, Image.SCALE_SMOOTH);  
        MenuIcon = new ImageIcon(scaledImage);
        Cavalo.setIcon(MenuIcon);
        
        //originalIcon = new ImageIcon("C:/Users/Maria Clara/Documents/Chess_img/Sair.png"); 
        originalIcon =new ImageIcon(getClass().getResource("/Chess_img/Sair.png"));
        originalImage = originalIcon.getImage();
        scaledImage = originalImage.getScaledInstance(42, 42, Image.SCALE_SMOOTH);  
        MenuIcon = new ImageIcon(scaledImage);
        Sair.setIcon(MenuIcon);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChessFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChessFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChessFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChessFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChessFrame().setVisible(true);
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBispo;
    private javax.swing.JButton AddCavalo;
    private javax.swing.JButton AddTorre;
    private javax.swing.JLabel Bispo;
    private javax.swing.JPanel CapturadasBrancas;
    private javax.swing.JPanel CapturadasBrancas1;
    private javax.swing.JPanel CapturadasPretas;
    private javax.swing.JLabel Cavalo;
    private javax.swing.JPanel Letras;
    private javax.swing.JLabel Menu;
    private javax.swing.JPanel MenuLateral;
    private javax.swing.JPanel Numericas;
    private javax.swing.JLabel Sair;
    private javax.swing.JPanel Tabuleiro;
    private javax.swing.JLabel Torre;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
